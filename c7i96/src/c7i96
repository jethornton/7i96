#!/usr/bin/env python3

import sys, os, configparser, platform, subprocess
from functools import partial

from PyQt5 import uic, QtWidgets
from PyQt5.QtCore import pyqtSlot, Qt, QProcess
from PyQt5.QtWidgets import (QApplication, QMainWindow, QFileDialog,
	QLineEdit, QSpinBox, QCheckBox, QComboBox, QLabel, QGroupBox,
	QDoubleSpinBox, QMessageBox, QInputDialog)

from libc7i96 import buildcombos
from libc7i96 import loadini
from libc7i96 import checkit
from libc7i96 import buildfiles
from libc7i96 import card
from libc7i96 import pcinfo
from libc7i96 import extcmd
from libc7i96 import helptext
from libc7i96.dialog import Ui_Dialog as errorDialog
from libc7i96.help import Ui_Dialog as helpDialog
from libc7i96.about import Ui_about as aboutDialog

#UI_FILE = os.path.join(os.path.dirname(__file__), "c7i96.ui")

class MainWindow(QMainWindow):
	def __init__(self):
		super(MainWindow, self).__init__()
		#uic.loadUi(UI_FILE, self)
		if os.path.split(sys.argv[0])[0] == '/usr/bin':
			self.lib_path = '/usr/lib/c7i96'
			print('Installed')

		if os.path.split(sys.argv[0])[0] == '.':
			self.lib_path = os.path.split(os.path.realpath(sys.argv[0]))[0]
			print('In Development')
		uic.loadUi(os.path.join(self.lib_path, 'c7i96.ui'), self)
		self.version = '1.2.5'
		self.config = configparser.ConfigParser(strict=False)
		self.setWindowTitle(f'7i96 Configuration Tool Version {self.version}')
		self.configNameUnderscored = ''
		self.checkConfig = checkit.config
		self.builddirs = buildfiles.builddirs
		self.buildini = buildfiles.buildini
		self.buildhal = buildfiles.buildhal
		self.buildio = buildfiles.buildio
		self.buildmisc = buildfiles.buildmisc
		self.pcStats = platform.uname()
		self.qclip = QtWidgets.QApplication.clipboard()
		self.helpInfo = helptext.descriptions
		self.buildCB()
		self.setupConnections()
		self.axisList = ['axisCB_0', 'axisCB_1', 'axisCB_2', 'axisCB_3', 'axisCB_4']
		self.ladderOptionsList = ['ladderRungsSB', 'ladderBitsSB', 'ladderWordsSB',
			'ladderTimersSB', 'iecTimerSB', 'ladderMonostablesSB', 'ladderCountersSB',
			'ladderInputsSB', 'ladderOutputsSB', 'ladderExpresionsSB',
			'ladderSectionsSB', 'ladderSymbolsSB', 'ladderS32InputsSB',
			'ladderS32OuputsSB', 'ladderFloatInputsSB', 'ladderFloatOutputsSB']

		self.firmware = {
		'7i96d.bit': ['1', '5', '0'],
		'7i96d_1pwm.bit':['1', '4', '1'],
		'7i96_5abob_d.bit':['2', '8', '0'],
		'7i96_6enc_d.bit':['6', '5', '0'],
		'7i96_7i76d.bit':['2', '10', '0'],
		'7i96_7i77d.bit':['8', '5', '0'],
		'7i96_7i78d.bit':['2', '9', '0'],
		'7i96_7i85d.bit':['6', '9', '0'],
		'7i96_7i85sd.bit':['6', '8', '0'],
		'7i961pwm_7i85s.bit':['6', '8', '1'],
		'7i96_7i89d.bit':['10', '5', '0'],
		'7i96_g540dpl.bit':['3', '9', '0']
		}

		self.checks()
		self.units = False
		self.results = ""
		self.extcmd = extcmd.extcmd()

		self.show()

	def checks(self):
		try:
			subprocess.check_output('mesaflash', encoding='UTF-8')
		except FileNotFoundError:
			t = "Mesaflash not found go to\nhttps://github.com/LinuxCNC/mesaflash\nfor installation instructions."
			self.outputPTE.appendPlainText(t)
			self.readCardPB.setEnabled(False)
			self.flashPB.setEnabled(False)
			self.reloadPB.setEnabled(False)

	# Auto connected menu action callbacks
	@pyqtSlot()
	def on_actionFileNew_triggered(self):
		print('File New')

	@pyqtSlot()
	def on_actionOpen_triggered(self):
		if os.path.isdir(os.path.expanduser('~/linuxcnc/configs')):
			configsDir = os.path.expanduser('~/linuxcnc/configs')
		else:
			configsDir = os.path.expanduser('~/')
		fileName = QFileDialog.getOpenFileName(self,
		caption="Select Configuration INI File", directory=configsDir,
		filter='*.ini', options=QFileDialog.DontUseNativeDialog,)
		if fileName:
			iniFile = (fileName[0])
			if self.config.read(iniFile):
				self.iniLoad()

	@pyqtSlot()
	def on_actionSave_triggered(self):
		self.on_actionBuild_triggered()

	@pyqtSlot()
	def on_actionSavePins_triggered(self):
		card.saveHal(self, 'pin')

	@pyqtSlot()
	def on_actionSaveSignals_triggered(self):
		card.saveHal(self, 'sig')

	@pyqtSlot()
	def on_actionSaveParameters_triggered(self):
		card.saveHal(self, 'parameter')

	"""
	def savePins(self):
		fp = os.path.join(self.configPath, self.configNameUnderscored + '-pins.txt')
		with open(fp, 'w') as f:
			f.writelines(subprocess.getoutput("halcmd show pin"))

	def saveSigs(self):
		fp = os.path.join(self.configPath, self.configNameUnderscored + '-sigs.txt')
		with open(fp, 'w') as f:
			f.writelines(subprocess.getoutput("halcmd show sig"))
	"""

	@pyqtSlot()
	def on_actionAbout_triggered(self):
		dialog = QtWidgets.QDialog()
		dialog.ui = aboutDialog()
		dialog.ui.setupUi(dialog)
		dialog.ui.versionLB.setText(f'Version {self.version}')
		dialog.ui.systemLB.setText(self.pcStats.system)
		dialog.ui.releaseLB.setText(f'Kernel {self.pcStats.release}')
		dialog.ui.machineLB.setText(f'Processor {self.pcStats.machine}')
		if sys.maxsize > 2**32: # test for 64bit OS
			dialog.ui.bitsLB.setText('64 bit OS')
		else:
			dialog.ui.bitsLB.setText('32 bit OS')
		dialog.exec_()

	@pyqtSlot()
	def on_actionCheck_triggered(self):
		if self.checkConfig(self):
			QMessageBox.about(self, 'Configuration', '		Checked OK		')
		else:
			self.errorDialog(self.checkConfig.result)

	@pyqtSlot()
	def on_actionBuild_triggered(self):
		if not self.checkConfig(self):
			self.errorDialog(self.checkConfig.result)
			return

		result = self.builddirs(self)
		if result:
			result = self.buildini(self)
		else:
			self.statusbar.showMessage('Build Directories Failed')
			return
		if result:
			result = self.buildhal(self)
		else:
			self.statusbar.showMessage('Build INI File Failed')
			return
		if result:
			result = self.buildio(self)
		else:
			self.statusbar.showMessage('Build HAL Files Failed')
			return
		if result:
			result = self.buildmisc(self)
		else:
			self.statusbar.showMessage('Build I/O Files Failed')
			return
		if result:
			self.statusbar.showMessage('Build Files Completed')
		else:
			self.statusbar.showMessage('Build Misc Files Failed')

	@pyqtSlot()
	def on_actionSaveAs_triggered(self):
		text, ok = QInputDialog.getText(self, 'Input Dialog','Enter New Configuration Name:')
		self.configName.setText(text)
		self.on_actionBuild_triggered()

	@pyqtSlot()
	def on_actionExit_triggered(self):
		exit()

	@pyqtSlot()
	def on_actionTabHelp_triggered(self):
		self.help(self.tabWidget.currentIndex())

	@pyqtSlot()
	def on_actionBuildHelp_triggered(self):
		self.help(20)

	@pyqtSlot()
	def on_actionPCHelp_triggered(self):
		self.help(30)

	def setupConnections(self):
		self.configName.textChanged[str].connect(self.onConfigNameChanged)
		self.maxLinearVel.textChanged[str].connect(self.onMaxLinearVelChanged)
		self.boardsCB.currentIndexChanged.connect(self.onBoardsChanged)
		self.firmwareCB.currentIndexChanged.connect(self.onFirmwareChanged)
		self.servoPeriodSB.valueChanged.connect(self.servoPeriodChanged)

		for i in range(5):
			getattr(self, 'axisCB_' + str(i)).currentIndexChanged.connect(self.onAxisChanged)
		for i in range(5):
			getattr(self, 'scale_' + str(i)).textChanged.connect(self.updateAxisInfo)
		for i in range(5):
			getattr(self, 'maxVelocity_' + str(i)).textChanged.connect(self.updateAxisInfo)
		for i in range(5):
			getattr(self, 'maxAccel_' + str(i)).textChanged.connect(self.updateAxisInfo)
		for i in range(5):
			getattr(self, 'pidDefault_' + str(i)).clicked.connect(self.pidSetDefault)
		for i in range(5):
			getattr(self, 'driveCB_' + str(i)).currentIndexChanged.connect(self.driveChanged)

		self.pidDefault_s.clicked.connect(self.pidSetDefault)
		self.copyPB.clicked.connect(self.copyOutput)
		self.copyInfoPB.clicked.connect(self.copyInfo)
		self.spindleTypeCB.currentIndexChanged.connect(self.spindleTypeChanged)
		self.linearUnitsCB.currentIndexChanged.connect(self.linearUnitsChanged)
		#     obj.signal.connect(partial(fun, args1, arg2, ... ))
		self.cpuPB.clicked.connect(partial(pcinfo.cpuInfo, self))
		self.nicPB.clicked.connect(partial(pcinfo.nicInfo, self))
		self.calcNicPB.clicked.connect(partial(pcinfo.nicCalc, self))
		self.readTmaxPB.clicked.connect(partial(pcinfo.readTmax, self))
		self.readPB.clicked.connect(partial(card.readCard, self, '7i96'))
		self.flashPB.clicked.connect(partial(card.flashCard, self, '7i96'))
		self.reloadPB.clicked.connect(partial(card.reloadCard, self, '7i96'))
		self.pinsPB.clicked.connect(partial(card.getPins, self))

	def copyOutput(self):
		self.qclip.setText(self.outputPTE.toPlainText())
		self.statusbar.showMessage('Output copied to clipboard')

	def copyInfo(self): # this is a QPlainTextEdit
		self.qclip.setText(self.infoTE.toPlainText())
		self.statusbar.showMessage('Output copied to clipboard')

	def isNumber(self, s):
		try:
			s[-1].isdigit()
			float(s)
			return True
		except ValueError:
			return False

	def onConfigNameChanged(self, text):
		# update the iniDictionary when text is changed
		if text:
			self.configNameUnderscored = text.replace(' ','_').lower()
			self.configPath = os.path.expanduser('~/linuxcnc/configs') + '/' + self.configNameUnderscored
			self.pathLabel.setText(self.configPath)
		else:
			self.pathLabel.setText('')

	def onMaxLinearVelChanged(self, text):
		if text:
			fpm = str(float(text) * 60)
			if self.linearUnitsCB.itemData(self.linearUnitsCB.currentIndex()) == 'inch':
				self.maxVelocityLbl.setText(f'{fpm} IPM')
			if self.linearUnitsCB.itemData(self.linearUnitsCB.currentIndex()) == 'metric':
				self.maxVelocityLbl.setText(f'{fpm} MPS')

	def linearUnitsChanged(self):
		if self.linearUnitsCB.itemData(self.linearUnitsCB.currentIndex()) == 'inch':
			for i in range(5):
				getattr(self, 'minLimit_' + str(i)).setToolTip('inches')
				getattr(self, 'maxLimit_' + str(i)).setToolTip('inches')
				getattr(self, 'maxVelocity_' + str(i)).setToolTip('inches per second')
				getattr(self, 'maxAccel_' + str(i)).setToolTip('inches per second per second')
				self.units = 'inches'
		if self.linearUnitsCB.itemData(self.linearUnitsCB.currentIndex()) == 'metric':
			for i in range(5):
				getattr(self, 'minLimit_' + str(i)).setToolTip('millimeters')
				getattr(self, 'maxLimit_' + str(i)).setToolTip('millimeters')
				getattr(self, 'maxVelocity_' + str(i)).setToolTip('millimeters per second')
				getattr(self, 'maxAccel_' + str(i)).setToolTip('millimeters per second per second')
				self.units = 'mm'
		if self.linearUnitsCB.itemData(self.linearUnitsCB.currentIndex()):
			self.axisTab.setEnabled(True)
			self.joint0tab.setEnabled(True)
		else:
			self.axisTab.setEnabled(False)

	def onBoardsChanged(self):
		bitfile = self.boardsCB.itemData(self.boardsCB.currentIndex())
		index = self.firmwareCB.findData(bitfile)
		if index >= 0:
			self.firmwareCB.setCurrentIndex(index)

	def onFirmwareChanged(self):
		self.encodersCB.clear()
		self.stepgensCB.clear()
		self.pwmsCB.clear()
		if self.firmwareCB.currentData():
			encoders = self.firmware[self.firmwareCB.currentData()][0]
			stepgens = self.firmware[self.firmwareCB.currentData()][1]
			pwms = self.firmware[self.firmwareCB.currentData()][2]

			for item in buildcombos.setupCombo('encoders_' + encoders):
				self.encodersCB.addItem(item[0], item[1])
			for item in buildcombos.setupCombo('stepgens_' + stepgens):
				self.stepgensCB.addItem(item[0], item[1])
			for item in buildcombos.setupCombo('pwms_' + pwms):
				self.pwmsCB.addItem(item[0], item[1])
			if pwms != '0':
				self.spindleTypeCB.setEnabled(True)
			else:
				self.spindleTypeCB.setEnabled(False)
				self.spindleTypeCB.setCurrentIndex(0)
		else:
			for item in buildcombos.setupCombo('encoders'):
				self.encodersCB.addItem(item[0], item[1])
			for item in buildcombos.setupCombo('stepgens'):
				self.stepgensCB.addItem(item[0], item[1])
			for item in buildcombos.setupCombo('pwms'):
				self.pwmsCB.addItem(item[0], item[1])

	def configChanged(self):
		print(self.configCB.itemData(self.configCB.currentIndex()))

	def onAxisChanged(self):
		coordList = []
		for item in self.axisList:
			if getattr(self,item).itemData(getattr(self,item).currentIndex()):
				jointTab = getattr(self,item).objectName()[7]
				axisLetter = getattr(self,item).itemData(getattr(self,item).currentIndex())
				coordList.append(axisLetter)
				if axisLetter in ['X', 'Y', 'Z', 'U', 'V', 'W']:
					getattr(self, 'axisType_' + jointTab).setText('LINEAR')
				elif axisLetter in ['A', 'B', 'C']:
					getattr(self, 'axisType_' + jointTab).setText('ANGULAR')
				else:
					getattr(self, 'axisType_' + jointTab).setText('')
		self.coordinatesLB.setText(''.join(coordList))
		self.stepgensSB.setValue(len(coordList))

	def driveChanged(self):
		timing = self.sender().itemData(self.sender().currentIndex())
		joint = self.sender().objectName()[-1]
		if timing:
			getattr(self, 'stepTime_' + joint).setText(timing[0])
			getattr(self, 'stepSpace_' + joint).setText(timing[1])
			getattr(self, 'dirSetup_' + joint).setText(timing[2])
			getattr(self, 'dirHold_' + joint).setText(timing[3])
			getattr(self, 'stepTime_' + joint).setEnabled(False)
			getattr(self, 'stepSpace_' + joint).setEnabled(False)
			getattr(self, 'dirSetup_' + joint).setEnabled(False)
			getattr(self, 'dirHold_' + joint).setEnabled(False)
		else:
			getattr(self, 'stepTime_' + joint).setEnabled(True)
			getattr(self, 'stepSpace_' + joint).setEnabled(True)
			getattr(self, 'dirSetup_' + joint).setEnabled(True)
			getattr(self, 'dirHold_' + joint).setEnabled(True)

	def servoPeriodChanged(self):
		print(f'{self.servoPeriodSB.cleanText()}')

	def updateAxisInfo(self):
		if self.sender().objectName() == 'actionOpen':
			return
		joint = self.sender().objectName()[-1]
		scale = getattr(self, 'scale_' + joint).text()
		if scale and self.isNumber(scale):
			scale = float(scale)
		else:
			return

		maxVelocity = getattr(self, 'maxVelocity_' + joint).text()
		if maxVelocity and self.isNumber(maxVelocity):
			maxVelocity = float(maxVelocity)
		else:
			return

		maxAccel = getattr(self, 'maxAccel_' + joint).text()
		if maxAccel and self.isNumber(maxAccel):
			maxAccel = float(maxAccel)
		else:
			return

		if not self.units:
			self.errorDialog('Machine Tab:\nLinear Units must be selected')
			return
		accelTime = maxVelocity / maxAccel
		getattr(self, 'timeJoint_' + joint).setText(f'{accelTime:.2f} seconds')
		accelDistance = accelTime * 0.5 * maxVelocity
		getattr(self, 'distanceJoint_' + joint).setText('f{accelDistance:.2f} {self.units}')
		stepRate = scale * maxVelocity
		getattr(self, 'stepRateJoint_' + joint).setText('f{abs(stepRate):.0f} pulses')

	def spindleTypeChanged(self): 
		#print(self.spindleTypeCB.itemData(self.spindleTypeCB.currentIndex()))
		if self.spindleTypeCB.currentData():
			self.spindleGB.setEnabled(True)
			self.spindleInfoGB.setEnabled(True)
			self.encoderGB.setEnabled(True)
			self.spindlepidGB.setEnabled(True)
			if self.spindleTypeCB.itemData(self.spindleTypeCB.currentIndex()) == '1':
				self.spindleInfo1Lbl.setText("PWM on Step 4")
				self.tb2p3LB.setText("PWM +")
				self.tb2p2LB.setText("PWM -")
				self.spindleInfo2Lbl.setText("Direction on Dir 4")
				self.tb2p5LB.setText("Direction +")
				self.tb2p4LB.setText("Direction -")
				self.spindleInfo3Lbl.setText("Select Enable on the Outputs tab")
			if self.spindleTypeCB.itemData(self.spindleTypeCB.currentIndex()) == '2':
				self.spindleInfo1Lbl.setText("UP on Step 4")
				self.tb2p3LB.setText("UP +")
				self.tb2p2LB.setText("UP -")
				self.spindleInfo2Lbl.setText("Down on Dir 4")
				self.tb2p5LB.setText("DOWN +")
				self.tb2p4LB.setText("DOWN -")
				self.spindleInfo3Lbl.setText("Select Enable on the Outputs tab")
			if self.spindleTypeCB.itemData(self.spindleTypeCB.currentIndex()) == '3':
				self.spindleInfo1Lbl.setText("PDM on Step 4")
				self.tb2p3LB.setText("PDM +")
				self.tb2p2LB.setText("PDM -")
				self.spindleInfo2Lbl.setText("Direction on Dir 4")
				self.tb2p5LB.setText("Direction +")
				self.tb2p4LB.setText("Direction -")
				self.spindleInfo3Lbl.setText("Select Enable on the Outputs tab")
			if self.spindleTypeCB.itemData(self.spindleTypeCB.currentIndex()) == '4':
				self.spindleInfo1Lbl.setText("Direction on Step 4")
				self.tb2p3LB.setText("Direction +")
				self.tb2p2LB.setText("Direction -")
				self.spindleInfo2Lbl.setText("PWM on Dir 4")
				self.tb2p5LB.setText("PWM +")
				self.tb2p4LB.setText("PWM -")
				self.spindleInfo3Lbl.setText("Select Enable on the Outputs tab")

		else:
			self.spindleGB.setEnabled(False)
			self.spindleInfoGB.setEnabled(False)
			self.encoderGB.setEnabled(False)
			self.spindlepidGB.setEnabled(False)
			self.spindleInfo1Lbl.setText("No Spindle")
			self.spindleInfo2Lbl.setText("")
			self.spindleInfo3Lbl.setText("")
			self.spindleInfo4Lbl.setText("")

	def pidSetDefault(self):
		tab = self.sender().objectName()[-1]
		if not self.linearUnitsCB.itemData(self.linearUnitsCB.currentIndex()):
			QMessageBox.warning(self,'Warning', 'Machine Tab\nLinear Units\nmust be selected', QMessageBox.Ok)
			return
		p = int(1000/(int(self.servoPeriodSB.cleanText())/1000000))
		getattr(self, 'p_' + tab).setText(f'{p}')
		getattr(self, 'i_' + tab).setText('0')
		getattr(self, 'd_' + tab).setText('0')
		getattr(self, 'ff0_' + tab).setText('0')
		getattr(self, 'ff1_' + tab).setText('1')
		getattr(self, 'ff2_' + tab).setText('0.00013')
		getattr(self, 'bias_' + tab).setText('0')
		getattr(self, 'maxOutput_' + tab).setText('0')
		if self.linearUnitsCB.itemData(self.linearUnitsCB.currentIndex()) == 'inch':
			maxError = '0.0005'
		else:
			maxError = '0.0127'
		getattr(self, 'maxError_' + tab).setText(maxError)
		getattr(self, 'deadband_' + tab).setText('0')

	def buildCB(self):
		for item in buildcombos.setupCombo('ipAddress'):
			self.ipAddressCB.addItem(item[0], item[1])
		for item in buildcombos.setupCombo('stepgens'):
			self.stepgensCB.addItem(item[0], item[1])
		for item in buildcombos.setupCombo('encoders'):
			self.encodersCB.addItem(item[0], item[1])
		for item in buildcombos.setupCombo('pwms'):
			self.pwmsCB.addItem(item[0], item[1])
		for item in buildcombos.setupCombo('boards'):
			self.boardsCB.addItem(item[0], item[1])
		for item in buildcombos.setupCombo('display'):
			self.guiCB.addItem(item[0], item[1])
		for item in buildcombos.setupCombo('linearUnits'):
			self.linearUnitsCB.addItem(item[0], item[1])
		for item in buildcombos.setupCombo('angularUnits'):
			self.angularUnitsCB.addItem(item[0], item[1])
		for item in buildcombos.setupCombo('positionOffset'):
			self.positionOffsetCB.addItem(item[0], item[1])
		for item in buildcombos.setupCombo('positionFeedback'):
			self.positionFeedbackCB.addItem(item[0], item[1])
		for item in buildcombos.setupCombo('firmware'):
			self.firmwareCB.addItem(item[0], item[1])
		for item in buildcombos.setupCombo('spindle'):
			self.spindleTypeCB.addItem(item[0], item[1])
		for i in range(5):
			for item in buildcombos.setupCombo('axis'):
				getattr(self, 'axisCB_' + str(i)).addItem(item[0], item[1])
		for i in range(11):
			for item in buildcombos.setupCombo('input'):
				getattr(self, 'input_' + str(i)).addItem(item[0], item[1])
		for i in range(11):
			for item in buildcombos.setupCombo('input_invert'):
				getattr(self, 'inputInvert_' + str(i)).addItem(item[0], item[1])

		for i in range(11):
			for item in buildcombos.setupCombo('joint'):
				getattr(self, 'inputJoint_' + str(i)).addItem(item[0], item[1])
		for i in range(6):
			for item in buildcombos.setupCombo('output'):
				getattr(self, 'output_' + str(i)).addItem(item[0], item[1])


		for item in buildcombos.setupCombo('debug'):
			self.debugCombo.addItem(item[0], item[1])
		for i in range(5):
			for item in buildcombos.setupCombo('drive'):
				getattr(self, 'driveCB_' + str(i)).addItem(item[0], item[1])
		for item in buildcombos.setupCombo('speed'):
			self.speedCB.addItem(item[0], item[1])

	def iniLoad(self):
		# this can be removed after some time
		if self.config.has_option("HOSTMOT2", "FIRMWARE"):
			if self.config["HOSTMOT2"] ["FIRMWARE"].split('/')[0] == "firmware":
				index = self.firmwareCB.findData(self.config["HOSTMOT2"] ["FIRMWARE"].split('/')[1])
				if index > 0:
					self.firmwareCB.setCurrentIndex(index)
		# iniList section, item, value
		for item in loadini.iniList():
			if self.config.has_option(item[0], item[1]):
				if isinstance(getattr(self, item[2]), QLabel):
					getattr(self, item[2]).setText(self.config[item[0]][item[1]])
				if isinstance(getattr(self, item[2]), QLineEdit):
					getattr(self, item[2]).setText(self.config[item[0]][item[1]])
				if isinstance(getattr(self, item[2]), QSpinBox):
					getattr(self, item[2]).setValue(abs(int(self.config[item[0]][item[1]])))
				if isinstance(getattr(self, item[2]), QDoubleSpinBox):
					getattr(self, item[2]).setValue(float(self.config[item[0]][item[1]]))
				if isinstance(getattr(self, item[2]), QCheckBox):
					getattr(self, item[2]).setChecked(eval(self.config[item[0]][item[1]]))
				if isinstance(getattr(self, item[2]), QGroupBox):
					getattr(self, item[2]).setChecked(eval(self.config[item[0]][item[1]]))
				if isinstance(getattr(self, item[2]), QComboBox):
					index = getattr(self, item[2]).findData(self.config[item[0]][item[1]])
					if index >= 0:
						getattr(self, item[2]).setCurrentIndex(index)

	def errorDialog(self, text):
		dialog = QtWidgets.QDialog()
		dialog.ui = errorDialog()
		dialog.ui.setupUi(dialog)
		dialog.ui.label.setText(text)
		dialog.exec_()

	def errorMsg(self, text, title=None):
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Warning)
		msgBox.setWindowTitle(title)
		msgBox.setText(text)
		msgBox.setStandardButtons(QMessageBox.Cancel | QMessageBox.Ok)
		returnValue = msgBox.exec()
		if returnValue == QMessageBox.Ok:
			return True
		else:
			return False

	def errorMsgOk(self, text, title=None):
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Warning)
		msgBox.setWindowTitle(title)
		msgBox.setText(text)
		msgBox.setStandardButtons(QMessageBox.Ok)
		returnValue = msgBox.exec()
		if returnValue == QMessageBox.Ok:
			return True
		else:
			return False

	def help(self, index):
		dialog = QtWidgets.QDialog()
		dialog.ui = helpDialog()
		dialog.ui.setupUi(dialog)
		dialog.ui.label.setText(self.helpInfo(index))
		dialog.exec_()

def main():
	app = QApplication(sys.argv)
	ex = MainWindow()
	sys.exit(app.exec_())

if __name__ == "__main__":
	main()
